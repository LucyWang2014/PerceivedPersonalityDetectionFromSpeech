# -*- coding: utf-8 -*-
"""
Created on Tue May 12 23:41:27 2015

@author: mayarotmensch
"""

import pandas as pd
import numpy as np
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn import cross_validation
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.svm import SVC

GBC = [[[ 0.55088442,  0.57184395,  0.57450933,  0.578992,    0.57887085],
  [ 0.58074685,  0.59311348,  0.60196411,  0.60172163,  0.6013579 ],
  [ 0.56466414 , 0.58069252,  0.58778906,  0.58191607,  0.57628778],
  [ 0.56870649 , 0.57737877,  0.58592891,  0.57591303,  0.57163796],
  [ 0.56394566 , 0.59038061,  0.59625505,  0.59392975,  0.58805532]],

 [[ 0.5699055  , 0.59655924,  0.59704386,  0.58795735,  0.5860189 ],
  [ 0.57820078  ,0.60984481,  0.6136033 ,  0.60184287,  0.6007517 ],
  [ 0.54361923  ,0.58595375,  0.58681023,  0.58558669,  0.58521963],
  [ 0.5516062   ,0.59081471,  0.59472334,  0.59374618,  0.58947111],
  [ 0.57079917  ,0.59478644,  0.59833558,  0.59821319,  0.59209399]],

 [[ 0.55245941  ,0.60176884,  0.61267264,  0.61133996,  0.60891689],
  [ 0.57613967  ,0.62015034,  0.62281765,  0.62815228,  0.62136275],
  [ 0.58497492  ,0.60638688,  0.60491863,  0.60773278,  0.60345039],
  [ 0.57811164  ,0.62293881,  0.6242824 ,  0.62440454,  0.61744229],
  [ 0.58291519  ,0.61791702,  0.62256762,  0.62452576,  0.62293477]],

 [[ 0.5519748   ,0.56687667,  0.57123819,  0.56384783,  0.56178822],
  [ 0.53952473  ,0.55674103,  0.56631911,  0.56959263,  0.57759457],
  [ 0.54900281  ,0.56441943,  0.57139361,  0.56968066,  0.56625474],
  [ 0.54036888  ,0.55392696,  0.55942348,  0.56308782,  0.55588128],
  [ 0.51021907  ,0.54240607,  0.55097295,  0.54595521,  0.54534329]],

 [[ 0.73382602,  0.75563363 , 0.75648171,  0.75187788,  0.7471529 ],
  [ 0.72902522,  0.75242483 , 0.75242483,  0.74890883,  0.7406644 ],
  [ 0.73351279,  0.75578123 , 0.75382357,  0.75272238,  0.7428117 ],
  [ 0.75717601,  0.77183339 , 0.76682545,  0.76511543,  0.75754245],
  [ 0.7123975 ,  0.7346714  , 0.74017868,  0.73944438,  0.73589524]],

 [[ 0.52326145,  0.53501333 , 0.5340441 ,  0.52956142,  0.52919796],
  [ 0.5449806 ,  0.54388943 , 0.55104268,  0.54328322,  0.53273521],
  [ 0.51633427,  0.5397039 ,  0.54545455,  0.54582161,  0.53945919],
  [ 0.53560523,  0.53597166 , 0.54476609,  0.54513253,  0.53975815],
  [ 0.54803574,  0.54473137,  0.54803574,  0.54350753,  0.5383674 ]]]

nEstimators = [10,100,200,500,1000]  
C = [10**x for x in range(-5,5)]
Target_Col = ['Aggressive','Attractive','Confident','Intelligent','Masculine','Trust']    
GBC_avg = np.mean(GBC, axis=1)
GBC_std = np.std(GBC, axis=1)
position = 231    
fig = plt.figure()
for i in range(len(Target_Col)):
    #print len(GBC_avg[i])
    ax = fig.add_subplot(position)
    ax.plot(np.log(nEstimators),GBC_avg[i])
    ax.fill_between(np.log(nEstimators),GBC_avg[i]+GBC_std[i], GBC_avg[i]-GBC_std[i], facecolor='blue', alpha=0.3)
    ax.set_title(Target_Col[i])
    ax.set_autoscaley_on(True)
    position += 1
plt.tight_layout()
#fig.savefig("figiresGBC_10fold.png") 


##########################################


RF_Score =[[[ 0.57536074,  0.5862738,   0.58675882,  0.58748636,  0.58712259],
  [ 0.56249242,  0.57316038,  0.57364529,  0.57643351,  0.57752455],
  [ 0.56907292,  0.57615732,  0.57359228,  0.57847807,  0.57701234],
  [ 0.56340779,  0.58183815,  0.5850116 ,  0.58452337,  0.58257049],
  [ 0.57125397,  0.58445368,  0.58653141,  0.58848692,  0.58579809]],

 [[ 0.57135928,  0.58409118,  0.590154  ,  0.58578877,  0.58979023],
  [ 0.56819008,  0.58334344,  0.58479816,  0.58625288,  0.58516184],
  [ 0.56308782,  0.57566874,  0.5766459 ,  0.57505802,  0.57652376],
  [ 0.58122788,  0.58672037,  0.59087026,  0.5896497 ,  0.59257903],
  [ 0.5683207 ,  0.5789538,   0.58298704,  0.58042044,  0.58103153]],

 [[ 0.5804535,   0.60167334,  0.60191585,  0.60106705,  0.60082454],
  [ 0.59873924,  0.60807371,  0.61086192,  0.61049824,  0.61280155],
  [ 0.5837303 ,  0.59655551,  0.59362404,  0.59472334,  0.59423476],
  [ 0.59282314,  0.61442695,  0.61064323,  0.60930062 , 0.61052118],
  [ 0.5939868 ,  0.60535321,  0.60999756,  0.60938646,  0.60877536]],

 [[ 0.54795683, 0.56202255 , 0.56650903,  0.56359888,  0.56760034],
  [ 0.53958056,  0.55485513,  0.5560674,   0.55812826,  0.55618863],
  [ 0.54354464,  0.55600342,  0.55111763,  0.55600342,  0.55417125],
  [ 0.54253631,  0.56902234,  0.56951056,  0.56743562,  0.56865617],
  [ 0.54399902,  0.54644341,  0.55194329,  0.54302127,  0.54412124]],

 [[ 0.72317206,  0.74196678,  0.74063296 , 0.74220929,  0.74463441],
  [ 0.70735847,  0.73136138,  0.72881561,  0.73245242,  0.73414959],
  [ 0.72187615,  0.74728228,  0.74642726,  0.747893  ,  0.74948088],
  [ 0.715855  ,  0.73416331,  0.73867936,  0.73575003,  0.73782497],
  [ 0.71718406,  0.73551699,  0.73857248,  0.74077243,  0.73857248]],

 [[ 0.54553171,  0.54674427,  0.55244331,  0.5522008 ,  0.55135201],
  [ 0.53327676,  0.53267063,  0.53279185,  0.53097345,  0.53060977],
  [ 0.53975815,  0.54403322,  0.53914743,  0.54378893,  0.54207891],
  [ 0.54094959,  0.54998169,  0.55559624,  0.5524228 ,  0.55413158],
  [ 0.52419946,  0.53996578,  0.540088  ,  0.53911024,  0.54033244]]]
  
  
RF_avg = np.mean(RF_Score, axis=1)
RF_std = np.std(RF_Score, axis=1)
position = 231       
fig = plt.figure()
#plt.title("BIG")
for i in range(len(Target_Col)):
    ax = fig.add_subplot(position)
    ax.plot(np.log(nEstimators),RF_avg[i], color='blue')
    ax.fill_between(np.log(nEstimators),RF_avg[i]+RF_std[i], RF_avg[i]-RF_std[i], facecolor='blue', alpha=0.3)
    ax.set_title(Target_Col[i])
    ax.set_autoscaley_on(True)
    position += 1

plt.tight_layout()
fig.savefig("RF_5fold.png") 

########################### Compare #############################################
RF_avg = np.mean(RF_Score, axis=1)
RF_std = np.std(RF_Score, axis=1)
position = 231       
fig = plt.figure()
#plt.title("BIG")
for i in range(len(Target_Col)):
    #print len(GBC_avg[i])
    ax = fig.add_subplot(position)
    ax.plot(np.log(nEstimators),RF_avg[i], color='blue')
    ax.plot(np.log(nEstimators),GBC_avg[i], color='green')
    ax.fill_between(np.log(nEstimators),RF_avg[i]+RF_std[i], RF_avg[i]-RF_std[i], facecolor='blue', alpha=0.3)
    ax.fill_between(np.log(nEstimators),GBC_avg[i]+GBC_std[i], GBC_avg[i]-GBC_std[i], facecolor='green', alpha=0.3)
    ax.set_title(Target_Col[i])
    ax.set_autoscaley_on(True)
    position += 1

plt.tight_layout()
fig.savefig("comapre_5fold.png") 


def max_finder(Scorer, Target_Col):
    for i, y in enumerate(Scorer):
        index = np.argmax(y)
        print Target_Col[i], "   nEstimators:  ", nEstimators[index], "   AUC:  ", np.max(y)
    
max_finder(RF_avg, Target_Col)

max_finder(GBC_avg, Target_Col)